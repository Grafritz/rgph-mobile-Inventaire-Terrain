package ht.ihsi.inventaireterrain.Backend;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.inventaireterrain.Backend.Inventaire;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_inventaire".
*/
public class InventaireDao extends AbstractDao<Inventaire, Long> {

    public static final String TABLENAME = "tbl_inventaire";

    /**
     * Properties of entity Inventaire.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdInventaire = new Property(0, Long.class, "IdInventaire", true, "IdInventaire");
        public final static Property TypeInventaire = new Property(1, String.class, "TypeInventaire", false, "TypeInventaire");
        public final static Property DepartementId = new Property(2, String.class, "DepartementId", false, "DepartementId");
        public final static Property CommuneId = new Property(3, String.class, "CommuneId", false, "CommuneId");
        public final static Property VqseId = new Property(4, String.class, "VqseId", false, "VqseId");
        public final static Property CodeSDE = new Property(5, String.class, "CodeSDE", false, "CodeSDE");
        public final static Property NomEtPrenomCartographe = new Property(6, String.class, "NomEtPrenomCartographe", false, "NomEtPrenomCartographe");
        public final static Property NomEtPrenomSuperviseur = new Property(7, String.class, "NomEtPrenomSuperviseur", false, "NomEtPrenomSuperviseur");
        public final static Property NePlusAfficherCetteFenetre = new Property(8, Boolean.class, "NePlusAfficherCetteFenetre", false, "NePlusAfficherCetteFenetre");
        public final static Property IsValidated = new Property(9, Boolean.class, "isValidated", false, "isValidated");
        public final static Property IsSynchroToAppSup = new Property(10, Boolean.class, "isSynchroToAppSup", false, "isSynchroToAppSup");
        public final static Property IsSynchroToCentrale = new Property(11, Boolean.class, "isSynchroToCentrale", false, "isSynchroToCentrale");
        public final static Property DateDebutCollecte = new Property(12, String.class, "dateDebutCollecte", false, "dateDebutCollecte");
        public final static Property DateFinCollecte = new Property(13, String.class, "dateFinCollecte", false, "dateFinCollecte");
    };


    public InventaireDao(DaoConfig config) {
        super(config);
    }
    
    public InventaireDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_inventaire\" (" + //
                "\"IdInventaire\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: IdInventaire
                "\"TypeInventaire\" TEXT," + // 1: TypeInventaire
                "\"DepartementId\" TEXT," + // 2: DepartementId
                "\"CommuneId\" TEXT," + // 3: CommuneId
                "\"VqseId\" TEXT," + // 4: VqseId
                "\"CodeSDE\" TEXT," + // 5: CodeSDE
                "\"NomEtPrenomCartographe\" TEXT," + // 6: NomEtPrenomCartographe
                "\"NomEtPrenomSuperviseur\" TEXT," + // 7: NomEtPrenomSuperviseur
                "\"NePlusAfficherCetteFenetre\" INTEGER," + // 8: NePlusAfficherCetteFenetre
                "\"isValidated\" INTEGER," + // 9: isValidated
                "\"isSynchroToAppSup\" INTEGER," + // 10: isSynchroToAppSup
                "\"isSynchroToCentrale\" INTEGER," + // 11: isSynchroToCentrale
                "\"dateDebutCollecte\" TEXT," + // 12: dateDebutCollecte
                "\"dateFinCollecte\" TEXT);"); // 13: dateFinCollecte
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_inventaire\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Inventaire entity) {
        stmt.clearBindings();
 
        Long IdInventaire = entity.getIdInventaire();
        if (IdInventaire != null) {
            stmt.bindLong(1, IdInventaire);
        }
 
        String TypeInventaire = entity.getTypeInventaire();
        if (TypeInventaire != null) {
            stmt.bindString(2, TypeInventaire);
        }
 
        String DepartementId = entity.getDepartementId();
        if (DepartementId != null) {
            stmt.bindString(3, DepartementId);
        }
 
        String CommuneId = entity.getCommuneId();
        if (CommuneId != null) {
            stmt.bindString(4, CommuneId);
        }
 
        String VqseId = entity.getVqseId();
        if (VqseId != null) {
            stmt.bindString(5, VqseId);
        }
 
        String CodeSDE = entity.getCodeSDE();
        if (CodeSDE != null) {
            stmt.bindString(6, CodeSDE);
        }
 
        String NomEtPrenomCartographe = entity.getNomEtPrenomCartographe();
        if (NomEtPrenomCartographe != null) {
            stmt.bindString(7, NomEtPrenomCartographe);
        }
 
        String NomEtPrenomSuperviseur = entity.getNomEtPrenomSuperviseur();
        if (NomEtPrenomSuperviseur != null) {
            stmt.bindString(8, NomEtPrenomSuperviseur);
        }
 
        Boolean NePlusAfficherCetteFenetre = entity.getNePlusAfficherCetteFenetre();
        if (NePlusAfficherCetteFenetre != null) {
            stmt.bindLong(9, NePlusAfficherCetteFenetre ? 1L: 0L);
        }
 
        Boolean isValidated = entity.getIsValidated();
        if (isValidated != null) {
            stmt.bindLong(10, isValidated ? 1L: 0L);
        }
 
        Boolean isSynchroToAppSup = entity.getIsSynchroToAppSup();
        if (isSynchroToAppSup != null) {
            stmt.bindLong(11, isSynchroToAppSup ? 1L: 0L);
        }
 
        Boolean isSynchroToCentrale = entity.getIsSynchroToCentrale();
        if (isSynchroToCentrale != null) {
            stmt.bindLong(12, isSynchroToCentrale ? 1L: 0L);
        }
 
        String dateDebutCollecte = entity.getDateDebutCollecte();
        if (dateDebutCollecte != null) {
            stmt.bindString(13, dateDebutCollecte);
        }
 
        String dateFinCollecte = entity.getDateFinCollecte();
        if (dateFinCollecte != null) {
            stmt.bindString(14, dateFinCollecte);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Inventaire readEntity(Cursor cursor, int offset) {
        Inventaire entity = new Inventaire( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // IdInventaire
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TypeInventaire
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DepartementId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // CommuneId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // VqseId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // CodeSDE
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // NomEtPrenomCartographe
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // NomEtPrenomSuperviseur
            cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0, // NePlusAfficherCetteFenetre
            cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0, // isValidated
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // isSynchroToAppSup
            cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0, // isSynchroToCentrale
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // dateDebutCollecte
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // dateFinCollecte
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Inventaire entity, int offset) {
        entity.setIdInventaire(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTypeInventaire(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDepartementId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCommuneId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVqseId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCodeSDE(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNomEtPrenomCartographe(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setNomEtPrenomSuperviseur(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNePlusAfficherCetteFenetre(cursor.isNull(offset + 8) ? null : cursor.getShort(offset + 8) != 0);
        entity.setIsValidated(cursor.isNull(offset + 9) ? null : cursor.getShort(offset + 9) != 0);
        entity.setIsSynchroToAppSup(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setIsSynchroToCentrale(cursor.isNull(offset + 11) ? null : cursor.getShort(offset + 11) != 0);
        entity.setDateDebutCollecte(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setDateFinCollecte(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Inventaire entity, long rowId) {
        entity.setIdInventaire(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Inventaire entity) {
        if(entity != null) {
            return entity.getIdInventaire();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
