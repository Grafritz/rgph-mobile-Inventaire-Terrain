package ht.ihsi.inventaireterrain.Backend;

import android.content.Context;
import android.content.ContextWrapper;
import android.database.DatabaseErrorHandler;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.os.Environment;
import android.util.Log;
import java.io.File;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.identityscope.IdentityScopeType;

import ht.ihsi.inventaireterrain.Backend.PersonnelDao;
import ht.ihsi.inventaireterrain.Backend.InventaireDao;
import ht.ihsi.inventaireterrain.Backend.BatimentDao;
import ht.ihsi.inventaireterrain.Backend.LogementDao;
import ht.ihsi.inventaireterrain.Backend.DepartementDao;
import ht.ihsi.inventaireterrain.Backend.CommuneDao;
import ht.ihsi.inventaireterrain.Backend.VqseDao;
import ht.ihsi.inventaireterrain.Backend.CodeSDEDao;
import ht.ihsi.inventaireterrain.Managers.LoadStaticDataMngr;
import ht.ihsi.inventaireterrain.Utilities.ToastUtility;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    public static final int SCHEMA_VERSION = 4;

    /** Creates underlying database table using DAOs. */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        PersonnelDao.createTable(db, ifNotExists);
        InventaireDao.createTable(db, ifNotExists);
        BatimentDao.createTable(db, ifNotExists);
        LogementDao.createTable(db, ifNotExists);
        DepartementDao.createTable(db, ifNotExists);
        CommuneDao.createTable(db, ifNotExists);
        VqseDao.createTable(db, ifNotExists);
        CodeSDEDao.createTable(db, ifNotExists);
    }
    
    /** Drops underlying database table using DAOs. */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        PersonnelDao.dropTable(db, ifExists);
        InventaireDao.dropTable(db, ifExists);
        BatimentDao.dropTable(db, ifExists);
        LogementDao.dropTable(db, ifExists);
        DepartementDao.dropTable(db, ifExists);
        CommuneDao.dropTable(db, ifExists);
        VqseDao.dropTable(db, ifExists);
        CodeSDEDao.dropTable(db, ifExists);
    }
    
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        private Context context;
        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
            this.context=context;
            //Log.i("rgphdb", "DevOpenHelper : "+context.getDatabasePath(name).getAbsolutePath());
        }

        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i(ToastUtility.TAG + "greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
            //LoadStaticDataMngr loadStaticDataMngr=new LoadStaticDataMngr();
            //loadStaticDataMngr.loadData(this.context, db);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(new DatabaseContext(context), name, factory);

        }

        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i(ToastUtility.TAG + "greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);

        }
    }

    public static class DatabaseContext extends ContextWrapper{

        private static final String DIRECTORY_DATA="Data";
        private static final String DATABASE_DIR="InventaireTerrain_db";

        public DatabaseContext(Context base) {
            super(base);
        }

        @Override
        public File getDatabasePath(String name) {

            File dir = new File(Environment.getExternalStoragePublicDirectory(
                    DIRECTORY_DATA), DATABASE_DIR);
            if (!dir.mkdirs()) {}
            File file = new File(Environment.getExternalStoragePublicDirectory(
                    DIRECTORY_DATA), DATABASE_DIR + File.separator + name+".db");
            return file;
        }

        @Override
        public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory) {
            SQLiteDatabase result = SQLiteDatabase.openOrCreateDatabase(this.getDatabasePath(name), null);
            return  result;
        }

        @Override
        public SQLiteDatabase openOrCreateDatabase(String name, int mode, CursorFactory factory, DatabaseErrorHandler errorHandler) {
            return openOrCreateDatabase(name, mode, factory);
        }
    }

    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(PersonnelDao.class);
        registerDaoClass(InventaireDao.class);
        registerDaoClass(BatimentDao.class);
        registerDaoClass(LogementDao.class);
        registerDaoClass(DepartementDao.class);
        registerDaoClass(CommuneDao.class);
        registerDaoClass(VqseDao.class);
        registerDaoClass(CodeSDEDao.class);
    }
    
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
