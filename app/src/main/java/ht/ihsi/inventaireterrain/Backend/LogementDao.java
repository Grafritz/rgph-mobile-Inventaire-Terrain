package ht.ihsi.inventaireterrain.Backend;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.inventaireterrain.Backend.Logement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_logement".
*/
public class LogementDao extends AbstractDao<Logement, Long> {

    public static final String TABLENAME = "tbl_logement";

    /**
     * Properties of entity Logement.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property IdLogement = new Property(0, Long.class, "IdLogement", true, "IdLogement");
        public final static Property BatimentId = new Property(1, Long.class, "BatimentId", false, "BatimentId");
        public final static Property NumeroLogement = new Property(2, Integer.class, "NumeroLogement", false, "NumeroLogement");
        public final static Property NomCompletChefMenage = new Property(3, String.class, "NomCompletChefMenage", false, "NomCompletChefMenage");
        public final static Property PhoneChefMenage = new Property(4, String.class, "PhoneChefMenage", false, "PhoneChefMenage");
        public final static Property NbrHommeVivant = new Property(5, Integer.class, "NbrHommeVivant", false, "NbrHommeVivant");
        public final static Property NbrFemmeVivant = new Property(6, Integer.class, "NbrFemmeVivant", false, "NbrFemmeVivant");
        public final static Property Remarques = new Property(7, String.class, "Remarques", false, "Remarques");
    };


    public LogementDao(DaoConfig config) {
        super(config);
    }
    
    public LogementDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_logement\" (" + //
                "\"IdLogement\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: IdLogement
                "\"BatimentId\" INTEGER," + // 1: BatimentId
                "\"NumeroLogement\" INTEGER," + // 2: NumeroLogement
                "\"NomCompletChefMenage\" TEXT," + // 3: NomCompletChefMenage
                "\"PhoneChefMenage\" TEXT," + // 4: PhoneChefMenage
                "\"NbrHommeVivant\" INTEGER," + // 5: NbrHommeVivant
                "\"NbrFemmeVivant\" INTEGER," + // 6: NbrFemmeVivant
                "\"Remarques\" TEXT);"); // 7: Remarques
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_logement\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Logement entity) {
        stmt.clearBindings();
 
        Long IdLogement = entity.getIdLogement();
        if (IdLogement != null) {
            stmt.bindLong(1, IdLogement);
        }
 
        Long BatimentId = entity.getBatimentId();
        if (BatimentId != null) {
            stmt.bindLong(2, BatimentId);
        }
 
        Integer NumeroLogement = entity.getNumeroLogement();
        if (NumeroLogement != null) {
            stmt.bindLong(3, NumeroLogement);
        }
 
        String NomCompletChefMenage = entity.getNomCompletChefMenage();
        if (NomCompletChefMenage != null) {
            stmt.bindString(4, NomCompletChefMenage);
        }
 
        String PhoneChefMenage = entity.getPhoneChefMenage();
        if (PhoneChefMenage != null) {
            stmt.bindString(5, PhoneChefMenage);
        }
 
        Integer NbrHommeVivant = entity.getNbrHommeVivant();
        if (NbrHommeVivant != null) {
            stmt.bindLong(6, NbrHommeVivant);
        }
 
        Integer NbrFemmeVivant = entity.getNbrFemmeVivant();
        if (NbrFemmeVivant != null) {
            stmt.bindLong(7, NbrFemmeVivant);
        }
 
        String Remarques = entity.getRemarques();
        if (Remarques != null) {
            stmt.bindString(8, Remarques);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Logement readEntity(Cursor cursor, int offset) {
        Logement entity = new Logement( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // IdLogement
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // BatimentId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // NumeroLogement
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // NomCompletChefMenage
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // PhoneChefMenage
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // NbrHommeVivant
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // NbrFemmeVivant
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // Remarques
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Logement entity, int offset) {
        entity.setIdLogement(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBatimentId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setNumeroLogement(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setNomCompletChefMenage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPhoneChefMenage(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNbrHommeVivant(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setNbrFemmeVivant(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setRemarques(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Logement entity, long rowId) {
        entity.setIdLogement(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Logement entity) {
        if(entity != null) {
            return entity.getIdLogement();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
