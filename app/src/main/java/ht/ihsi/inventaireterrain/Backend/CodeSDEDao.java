package ht.ihsi.inventaireterrain.Backend;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import ht.ihsi.inventaireterrain.Backend.CodeSDE;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "tbl_codesde".
*/
public class CodeSDEDao extends AbstractDao<CodeSDE, Void> {

    public static final String TABLENAME = "tbl_codesde";

    /**
     * Properties of entity CodeSDE.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property NumeroOrdre = new Property(0, String.class, "NumeroOrdre", false, "NumeroOrdre");
        public final static Property CodeSDE = new Property(1, String.class, "CodeSDE", false, "CodeSDE");
        public final static Property DeptId = new Property(2, String.class, "DeptId", false, "DeptId");
        public final static Property ComId = new Property(3, String.class, "ComId", false, "ComId");
        public final static Property VqseId = new Property(4, String.class, "VqseId", false, "VqseId");
        public final static Property Milieu = new Property(5, Integer.class, "Milieu", false, "Milieu");
    };


    public CodeSDEDao(DaoConfig config) {
        super(config);
    }
    
    public CodeSDEDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"tbl_codesde\" (" + //
                "\"NumeroOrdre\" TEXT NOT NULL UNIQUE ," + // 0: NumeroOrdre
                "\"CodeSDE\" TEXT NOT NULL ," + // 1: CodeSDE
                "\"DeptId\" TEXT," + // 2: DeptId
                "\"ComId\" TEXT," + // 3: ComId
                "\"VqseId\" TEXT NOT NULL ," + // 4: VqseId
                "\"Milieu\" INTEGER);"); // 5: Milieu
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"tbl_codesde\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CodeSDE entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getNumeroOrdre());
        stmt.bindString(2, entity.getCodeSDE());
 
        String DeptId = entity.getDeptId();
        if (DeptId != null) {
            stmt.bindString(3, DeptId);
        }
 
        String ComId = entity.getComId();
        if (ComId != null) {
            stmt.bindString(4, ComId);
        }
        stmt.bindString(5, entity.getVqseId());
 
        Integer Milieu = entity.getMilieu();
        if (Milieu != null) {
            stmt.bindLong(6, Milieu);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CodeSDE readEntity(Cursor cursor, int offset) {
        CodeSDE entity = new CodeSDE( //
            cursor.getString(offset + 0), // NumeroOrdre
            cursor.getString(offset + 1), // CodeSDE
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DeptId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ComId
            cursor.getString(offset + 4), // VqseId
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5) // Milieu
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CodeSDE entity, int offset) {
        entity.setNumeroOrdre(cursor.getString(offset + 0));
        entity.setCodeSDE(cursor.getString(offset + 1));
        entity.setDeptId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setComId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setVqseId(cursor.getString(offset + 4));
        entity.setMilieu(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CodeSDE entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CodeSDE entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
